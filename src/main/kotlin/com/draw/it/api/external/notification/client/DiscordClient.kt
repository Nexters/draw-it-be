package com.draw.it.api.external.notification.client

import com.draw.it.api.external.notification.dto.*
import com.draw.it.api.external.notification.properties.BizNotificationProperties
import com.draw.it.api.metrics.DailyMetrics
import io.github.oshai.kotlinlogging.KotlinLogging
import org.springframework.context.annotation.Profile
import org.springframework.http.HttpHeaders
import org.springframework.http.MediaType
import org.springframework.scheduling.annotation.Async
import org.springframework.stereotype.Component
import org.springframework.web.client.RestClient
import java.text.NumberFormat
import java.util.*

private const val NOTIFICATION_EXECUTOR_NAME = "bizNotificationExecutor"

@Profile("!local")
@Component
class DiscordClient(
    val notificationProperties: BizNotificationProperties
): BizNotificationClient {
    private val log = KotlinLogging.logger {}
    private val restClient = RestClient.builder()
        .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
        .build()

    @Async(NOTIFICATION_EXECUTOR_NAME)
    override fun sendUsual(message: DefaultNotificationMessage, type: BizNotificationType) {
        restClient.post()
            .uri(notificationProperties.etcMessage)
            .body(createDiscordRequest(message, type))
            .retrieve()
            .body(Any::class.java)
    }

    @Async(NOTIFICATION_EXECUTOR_NAME)
    override fun sendError(message: DefaultNotificationMessage) {
        restClient.post()
            .uri(notificationProperties.errorMessage)
            .body(createDiscordRequest(message, BizNotificationType.ERROR))
            .retrieve()
            .body(Any::class.java)
    }

    @Async(NOTIFICATION_EXECUTOR_NAME)
    override fun sendDailyMetrics(metrics: DailyMetrics) {
        val numberFormat = NumberFormat.getNumberInstance(Locale.KOREA)
        
        val fields = mutableListOf(
            DiscordEmbeddedField(
                name = "üìà Ïã†Í∑ú ÏÉùÏÑ±",
                value = """
                    üë• ÏÇ¨Ïö©Ïûê: **${numberFormat.format(metrics.newUsersToday)}Î™Ö**
                    üìù ÌîÑÎ°úÏ†ùÌä∏: **${numberFormat.format(metrics.newProjectsToday)}Í∞ú**
                    üé® ÎÇôÏÑú: **${numberFormat.format(metrics.newDoodlesToday)}Í∞ú**
                    üñºÔ∏è ÏôÑÏÑ±Îêú ÏûëÌíà: **${numberFormat.format(metrics.newCompletedProjectsToday)}Í∞ú**
                    üí¨ ÌîºÎìúÎ∞±: **${numberFormat.format(metrics.newFeedbacksToday)}Í∞ú**
                    ‚≠ê Ïò§Îäò ÌèâÍ∑† ÌèâÏ†ê: **${String.format("%.1f", metrics.todayAverageRating)}Ï†ê**
                    
                """.trimIndent()
            ),
            DiscordEmbeddedField(
                name = "üìä Ï†ÑÏ≤¥ ÎàÑÏ†Å",
                value = """
                    üë• Ï¥ù ÏÇ¨Ïö©Ïûê: **${numberFormat.format(metrics.totalUsers)}Î™Ö**
                    üìù Ï¥ù ÌîÑÎ°úÏ†ùÌä∏: **${numberFormat.format(metrics.totalProjects)}Í∞ú**
                    üé® Ï¥ù ÎÇôÏÑú: **${numberFormat.format(metrics.totalDoodles)}Í∞ú**
                    üñºÔ∏è Ï¥ù ÏôÑÏÑ±Îêú ÏûëÌíà: **${numberFormat.format(metrics.totalCompletedProjects)}Í∞ú**
                    üí¨ Ï¥ù ÌîºÎìúÎ∞±: **${numberFormat.format(metrics.totalFeedbacks)}Í∞ú**
                    ‚≠ê Ï†ÑÏ≤¥ ÌèâÍ∑† ÌèâÏ†ê: **${String.format("%.1f", metrics.averageRating)}Ï†ê**
                """.trimIndent()
            )
        )
        
        if (metrics.todayFeedbackMessages.isNotEmpty()) {
            val feedbackMessages = metrics.todayFeedbackMessages.take(10).joinToString("\n") { "‚Ä¢ $it" }
            fields.add(
                DiscordEmbeddedField(
                    name = "üí¨ Ïò§ÎäòÏùò ÌîºÎìúÎ∞± Î©îÏãúÏßÄ",
                    value = if (metrics.todayFeedbackMessages.size > 10) {
                        "$feedbackMessages\n... Ïô∏ ${metrics.todayFeedbackMessages.size - 10}Í∞ú"
                    } else {
                        feedbackMessages
                    }
                )
            )
        }
        
        val discordMessage = DiscordMessage(
            embeds = listOf(
                DiscordEmbeddedMessage(
                    title = "üìä Draw It ÏùºÏùº ÌÜµÍ≥Ñ (${metrics.date})",
                    color = BizNotificationType.INFO.color,
                    fields = fields
                )
            )
        )
        
        try {
            restClient.post()
                .uri(notificationProperties.metricsMessage)
                .body(discordMessage)
                .retrieve()
                .body(Any::class.java)
        } catch (e: Exception) {
            log.error { "Failed to send Discord metrics notification: ${e.message}" }

        }
    }

    private fun createDiscordRequest(message: DefaultNotificationMessage, type: BizNotificationType): DiscordMessage {
        return DiscordMessage(
            embeds = listOf(
                DiscordEmbeddedMessage(
                    title = type.title,
                    color = type.color,
                    fields = listOf(
                        DiscordEmbeddedField(name = "Request Id", value = "‚óæÔ∏è ${message.requestId}"),
                        DiscordEmbeddedField(name = "Request Time", value = "‚óæÔ∏è ${message.requestTime}"),
                        DiscordEmbeddedField(name = "Request URI", value = "‚óæÔ∏è ${message.requestUri}"),
                        DiscordEmbeddedField(name = "Message", value = "‚óæÔ∏è ${message.message}")
                    )
                )
            )
        )
    }
}
